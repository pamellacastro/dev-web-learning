# üìå Guia de Commits para Estudos

Este reposit√≥rio √© usado para acompanhar meu aprendizado em desenvolvimento.  
Para manter a organiza√ß√£o, sigo um padr√£o de commits inspirado no **Conventional Commits**, adaptado para estudos.

---

## üîë Tipos de commit

- **feat:** quando adiciono algo novo que aprendi (ex.: exerc√≠cio, aula, m√≥dulo).  
- **docs:** para anota√ß√µes, resumos ou materiais de apoio.  
- **chore:** para tarefas de organiza√ß√£o (ex.: cria√ß√£o de pastas, ajustes de estrutura).  
- **refactor:** quando reescrevo ou melhoro um c√≥digo j√° feito.  
- **fix:** se corrijo algum erro em exerc√≠cio ou anota√ß√£o.  
- **style:** para ajustes de formata√ß√£o, indenta√ß√£o ou renomea√ß√£o de arquivos.  

---

## üìö Exemplos pr√°ticos

- `feat: adicionar exerc√≠cios do m√≥dulo 2 de JavaScript`  
- `docs: resumo sobre fun√ß√µes em Python`  
- `chore: organizar pastas por cap√≠tulos`  
- `refactor: reescrever exerc√≠cio de arrays usando map`  
- `fix: corrigir erro de sintaxe no c√≥digo de loops`  
- `style: padronizar nomes de arquivos em min√∫sculo`  

---

## üéØ Dica extra
Sempre que poss√≠vel, indicar **aula, m√≥dulo ou cap√≠tulo** ajuda a manter a linha do tempo clara:

- `feat: concluir aula 03 - vari√°veis e tipos`  
- `docs: adicionar anota√ß√µes da se√ß√£o 5 - DOM`  
- `feat: implementar exerc√≠cio pr√°tico do cap√≠tulo 7`  

---

‚ú® Assim, fica f√°cil acompanhar minha evolu√ß√£o no curso e manter o hist√≥rico do reposit√≥rio bem organizado.
